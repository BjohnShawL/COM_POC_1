// <auto-generated />
using System;
using COM_POC_1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace COM_POC_1.Migrations
{
    [DbContext(typeof(CoMdbContext))]
    [Migration("20190728203201_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("COM_POC_1.Models.Attention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Marked");

                    b.Property<int>("ThemeId");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Attentions");
                });

            modelBuilder.Entity("COM_POC_1.Models.BuildUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Marked");

                    b.Property<int?>("ThemeId");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("BuildUps");
                });

            modelBuilder.Entity("COM_POC_1.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("PlayerId");

                    b.HasKey("CharacterId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("COM_POC_1.Models.Crack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Marked");

                    b.Property<string>("Name");

                    b.Property<int>("ThemeId");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Cracks");
                });

            modelBuilder.Entity("COM_POC_1.Models.Fade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Marked");

                    b.Property<string>("Name");

                    b.Property<int>("ThemeId");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Fades");
                });

            modelBuilder.Entity("COM_POC_1.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("COM_POC_1.Models.PowerTag", b =>
                {
                    b.Property<int>("PowerTagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDynamite");

                    b.Property<string>("Name");

                    b.Property<int?>("ThemeId");

                    b.HasKey("PowerTagId");

                    b.HasIndex("ThemeId");

                    b.ToTable("PowerTags");
                });

            modelBuilder.Entity("COM_POC_1.Models.Rift", b =>
                {
                    b.Property<int>("RiftId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId");

                    b.Property<bool>("CurrentlyActive");

                    b.Property<string>("Description");

                    b.Property<string>("Mystery");

                    b.Property<string>("Name");

                    b.HasKey("RiftId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Rifts");
                });

            modelBuilder.Entity("COM_POC_1.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("RiftId");

                    b.Property<int>("Type");

                    b.HasKey("ThemeId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("COM_POC_1.Models.Attention", b =>
                {
                    b.HasOne("COM_POC_1.Models.Theme", "Theme")
                        .WithMany("Attention")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COM_POC_1.Models.BuildUp", b =>
                {
                    b.HasOne("COM_POC_1.Models.Theme")
                        .WithMany("BuildUps")
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("COM_POC_1.Models.Character", b =>
                {
                    b.HasOne("COM_POC_1.Models.Player", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COM_POC_1.Models.Crack", b =>
                {
                    b.HasOne("COM_POC_1.Models.Theme", "Theme")
                        .WithMany("Cracks")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COM_POC_1.Models.Fade", b =>
                {
                    b.HasOne("COM_POC_1.Models.Theme", "Theme")
                        .WithMany("Fades")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COM_POC_1.Models.PowerTag", b =>
                {
                    b.HasOne("COM_POC_1.Models.Theme")
                        .WithMany("PowerTags")
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("COM_POC_1.Models.Rift", b =>
                {
                    b.HasOne("COM_POC_1.Models.Character", "Character")
                        .WithMany("Rifts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("COM_POC_1.Models.Theme", b =>
                {
                    b.HasOne("COM_POC_1.Models.Character")
                        .WithMany("Themes")
                        .HasForeignKey("CharacterId");
                });
#pragma warning restore 612, 618
        }
    }
}
